{"version":3,"sources":["logo.svg","components/header/title.jsx","components/header/header.jsx","components/header/header.container.jsx","components/home/home-welcome.jsx","components/home/home-information.jsx","services/release.service.js","store/releases/release.actions.js","store/releases/release.thunks.js","components/release/release.jsx","components/platform/platform.jsx","components/release/release-list.jsx","components/release/release.container.jsx","components/home/home.jsx","components/home/home.container.jsx","components/main/main.jsx","components/app.jsx","serviceWorker.js","store/releases/release.reducers.js","store/store.js","index.js"],"names":["Title","Component","Header","className","src","logo","alt","HeaderContainer","connect","state","dispatch","HomeWelcome","HomeInformation","ReleaseService","a","apiRequest","method","url","axios","ReleaseActionTypes","ReleaseActions","type","releases","error","ReleaseThunks","service","get","response","data","Release","release","this","props","version","Platform","platform","ReleaseList","releaseItems","map","index","platforms","ReleaseContainer","fetchReleases","Home","HomeContainer","Main","children","App","exact","from","to","path","component","Boolean","window","location","hostname","match","InitialState","isFetching","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b26f909.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b1599c9f.svg\";","import React, { Component } from 'react';\n\nimport './title.scss';\n\nexport default class Title extends Component {\n  render() {\n    return <span>Livestock Tracker</span>;\n  }\n}\n","import React, { Component } from 'react';\n\nimport logo from '../../logo.svg';\nimport Title from './title';\n\nexport class Header extends Component {\n  render() {\n    return (\n      <header className='app-header'>\n        <img src={logo} className='app-logo' alt='logo' />\n        <Title />\n      </header>\n    );\n  }\n}\n","import { connect } from 'react-redux';\n\nimport { Header } from './header';\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport const HeaderContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { Component } from 'react';\n\nexport default class HomeWelcome extends Component {\n  render() {\n    return (\n      <div className='welcome'>\n        <h1>Welcome</h1>\n        <p>The Livestock-Tracker is a lightweight animal information tracker</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class HomeInformation extends Component {\n  render() {\n    return (\n      <p className='information'>Will add some information here soon...</p>\n    );\n  }\n}\n","import axios from 'axios';\n\nexport class ReleaseService {\n  async get() {\n    const apiRequest = {\n      method: 'GET',\n      url: '../release.json'\n    };\n\n    return await axios(apiRequest);\n  }\n}\n","export const ReleaseActionTypes = {\n  RELEASE_FETCH: 'RELEASE_FETCH',\n  RELEASE_FETCH_COMPLETED: 'RELEASE_FETCH_COMPLETED',\n  RELEASE_FETCH_ERROR: 'RELEASE_FETCH_ERROR'\n};\n\nexport const ReleaseActions = {\n  releaseFetch: () => {\n    return {\n      type: ReleaseActionTypes.RELEASE_FETCH\n    };\n  },\n  releaseFetchCompleted: releases => {\n    return {\n      type: ReleaseActionTypes.RELEASE_FETCH_COMPLETED,\n      releases\n    };\n  },\n  releaseFetchError: error => {\n    return {\n      type: ReleaseActionTypes.RELEASE_FETCH_ERROR,\n      error\n    };\n  }\n};\n","import { ReleaseService } from '../../services/release.service';\nimport { ReleaseActions } from './release.actions';\n\nexport const ReleaseThunks = {\n  fetchReleases: () => async dispatch => {\n    dispatch(ReleaseActions.releaseFetch());\n    try {\n      const service = new ReleaseService();\n      const response = await service.get();\n      dispatch(ReleaseActions.releaseFetchCompleted(response.data));\n    } catch (e) {\n      dispatch(ReleaseActions.releaseFetchError(e));\n    }\n  }\n};\n","import React, { Component } from 'react';\n\nexport default class Release extends Component {\n  render() {\n    const { release } = this.props;\n    return <li>{release.version}</li>;\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Platform extends Component {\n  render() {\n    const { platform = 'win' } = this.props;\n    return <li className='platform-item'>{platform}</li>;\n  }\n}\n","import React, { Component } from 'react';\nimport Release from './release';\nimport { Platform } from '../platform/platform';\n\nimport './release.scss';\n\nexport default class ReleaseList extends Component {\n  render() {\n    const { releases } = this.props;\n\n    const releaseItems = releases.map((release = {}, index) => (\n      <Release key={index} release={release} />\n    ));\n\n    const platforms = releases.map((release = {}, index) => (\n      <Platform key={index} platform={release.platform} />\n    ));\n\n    return (\n      <div className='release'>\n        <ul className='platform-list'>{platforms}</ul>\n        <ul className='release-list'>{releaseItems}</ul>\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { ReleaseThunks } from '../../store/releases/release.thunks';\nimport ReleaseList from './release-list';\n\nconst mapStateToProps = state => ({\n  releases: state.releases.releases\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchReleases: dispatch(ReleaseThunks.fetchReleases())\n});\n\nexport const ReleaseContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReleaseList);\n","import React, { Component } from 'react';\nimport './home.scss';\nimport HomeWelcome from './home-welcome';\nimport HomeInformation from './home-information';\nimport { ReleaseContainer } from '../release/release.container';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className='home'>\n        <HomeWelcome />\n        <HomeInformation />\n        <ReleaseContainer />\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport Home from './home';\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport const HomeContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Home);\n","import React, { Component } from 'react';\n\nimport './main.scss';\n\nexport default class Main extends Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <main className='app-main'>\n        <div className='main-content'>{children}</div>\n      </main>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport { HeaderContainer } from './header/header.container';\nimport { HomeContainer } from './home/home.container';\nimport Main from './main/main';\n\nimport './app.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='app'>\n        <HeaderContainer />\n        <Main>\n          <Switch>\n            <Redirect exact from='/' to='/home' />\n            <Route exact path='/home' component={HomeContainer} />\n          </Switch>\n        </Main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ReleaseActionTypes } from './release.actions';\n\nconst InitialState = {\n  releases: [],\n  isFetching: false,\n  error: null\n};\n\nexport function releaseReducer(state = InitialState, action) {\n  switch (action.type) {\n    case ReleaseActionTypes.RELEASE_FETCH:\n      return { ...state, isFetching: true, error: null };\n    case ReleaseActionTypes.RELEASE_FETCH_COMPLETED:\n      return { ...state, isFetching: false, releases: action.releases };\n    case ReleaseActionTypes.RELEASE_FETCH_ERROR:\n      return { ...state, error: action.error };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { releaseReducer } from './releases/release.reducers';\n\nexport const reducers = combineReducers({\n  releases: releaseReducer\n});\n\nexport const store = createStore(\n  reducers,\n  {},\n  applyMiddleware(thunkMiddleware)\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}