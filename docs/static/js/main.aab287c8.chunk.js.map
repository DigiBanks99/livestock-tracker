{"version":3,"sources":["logo.svg","components/header/title.jsx","components/header/header.jsx","components/header/header.container.jsx","components/App.js","serviceWorker.js","store/releases/release.actions.js","store/releases/release.reducers.js","store/store.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","react_default","a","createElement","Component","Header","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","className","src","logo","alt","title_Title","HeaderContainer","connect","state","dispatch","App","Boolean","window","location","hostname","match","ReleaseActionTypes","RELEASE_FETCH","RELEASE_FETCH_COMPLETED","RELEASE_FETCH_ERROR","InitialState","releases","isFetching","error","reducers","combineReducers","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6RCInBC,0LAEjB,OAAOC,EAAAC,EAAAC,cAAA,wCAFwBC,cCCtBC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACEhB,EAAAC,EAAAC,cAAA,UAAQe,UAAU,cAChBjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCpB,EAAAC,EAAAC,cAACmB,EAAD,WALRjB,EAAA,CAA4BD,aCGfmB,EAAkBC,YAJP,SAAAC,GAAK,MAAK,IAEP,SAAAC,GAAQ,MAAK,IAETF,CAG7BnB,GCGasB,mLARX,OACE1B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAACoB,EAAD,cAJUnB,aCQEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sFClBOC,EAAqB,CAChCC,cAAe,gBACfC,wBAAyB,0BACzBC,oBAAqB,uBCDjBC,EAAe,CACnBC,SAAU,GACVC,YAAY,EACZC,MAAO,MCDF,IAAMC,EAAWC,YAAgB,CACtCJ,SDGK,WAAsD,IAA9Bb,EAA8BZ,UAAA8B,OAAA,QAAAC,IAAA/B,UAAA,GAAAA,UAAA,GAAtBwB,EAAcQ,EAAQhC,UAAA8B,OAAA,EAAA9B,UAAA,QAAA+B,EAC3D,OAAQC,GACN,KAAKZ,EAAmBC,cACtB,OAAO3B,OAAAuC,EAAA,EAAAvC,CAAA,GAAKkB,EAAZ,CAAmBc,YAAY,EAAMC,MAAO,OAC9C,KAAKP,EAAmBE,wBACtB,OAAO5B,OAAAuC,EAAA,EAAAvC,CAAA,GAAKkB,EAAZ,CAAmBc,YAAY,EAAOD,SAAUO,EAAOP,WACzD,KAAKL,EAAmBG,oBACtB,OAAO7B,OAAAuC,EAAA,EAAAvC,CAAA,GAAKkB,EAAZ,CAAmBe,MAAOK,EAAOL,QACnC,QACE,OAAOf,MCTAsB,EAAQC,YACnBP,EACA,GACAQ,YAAgBC,MCHlBC,IAASC,OACPnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUN,MAAOA,GACf9C,EAAAC,EAAAC,cAACmD,EAAD,OAEFC,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aab287c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c69084a6.svg\";","import React, { Component } from 'react';\n\nimport './title.scss';\n\nexport default class Title extends Component {\n  render() {\n    return <span>Livestock Tracker</span>;\n  }\n}\n","import React, { Component } from 'react';\n\nimport logo from '../../logo.svg';\nimport Title from './title';\n\nexport class Header extends Component {\n  render() {\n    return (\n      <header className='App-header'>\n        <img src={logo} className='App-logo' alt='logo' />\n        <Title />\n      </header>\n    );\n  }\n}\n","import { connect } from 'react-redux';\n\nimport { Header } from './header';\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport const HeaderContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { HeaderContainer } from './header/header.container';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <HeaderContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ReleaseActionTypes = {\n  RELEASE_FETCH: 'RELEASE_FETCH',\n  RELEASE_FETCH_COMPLETED: 'RELEASE_FETCH_COMPLETED',\n  RELEASE_FETCH_ERROR: 'RELEASE_FETCH_ERROR'\n};\n\nexport const ReleaseActions = {\n  releaseFetch: () => {\n    return {\n      type: ReleaseActionTypes.RELEASE_FETCH\n    };\n  },\n  releaseFetchCompleted: releases => {\n    return {\n      type: ReleaseActionTypes.RELEASE_FETCH_COMPLETED,\n      releases\n    };\n  },\n  releaseFetchError: error => {\n    return {\n      type: ReleaseActionTypes.RELEASE_FETCH_ERROR,\n      error\n    };\n  }\n};\n","import { ReleaseActionTypes } from './release.actions';\n\nconst InitialState = {\n  releases: [],\n  isFetching: false,\n  error: null\n};\n\nexport function releaseReducer(state = InitialState, action) {\n  switch (action) {\n    case ReleaseActionTypes.RELEASE_FETCH:\n      return { ...state, isFetching: true, error: null };\n    case ReleaseActionTypes.RELEASE_FETCH_COMPLETED:\n      return { ...state, isFetching: false, releases: action.releases };\n    case ReleaseActionTypes.RELEASE_FETCH_ERROR:\n      return { ...state, error: action.error };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { releaseReducer } from './releases/release.reducers';\n\nexport const reducers = combineReducers({\n  releases: releaseReducer\n});\n\nexport const store = createStore(\n  reducers,\n  {},\n  applyMiddleware(thunkMiddleware)\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}